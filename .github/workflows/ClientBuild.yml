name: Client Workflow

on:
  push:
    branches:
      - feature/CICD     # We'll map this to "test"
      - release/*        # We'll map this to "preprod"
    paths:
      - 'client/**'      # Only run if something under client/ changes
  workflow_dispatch:
    inputs:
      environment:
        description: "Select environment to build"
        required: true
        type: choice
        default: test
        options:
          - test
          - test2
          - preprod
          - prod

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup-client-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: Determine environment
        id: set-env
        run: |
          branch_name="${GITHUB_REF#refs/heads/}"

          if [[ "${GITHUB_EVENT_NAME}" == "push" ]]; then
            if [[ "$branch_name" == "feature/CICD" ]]; then
              envName="test"
            elif [[ "$branch_name" == release/* ]]; then
              envName="preprod"
            else
              # fallback if push from another branch
              envName="test"
            fi
          else
            chosen="${{ github.event.inputs.environment }}"
            
            # If chosen starts with "test", use "test" environment
            if [[ "$chosen" =~ ^test ]]; then
              envName="test"
            else
              envName="$chosen"
            fi
          fi

          echo "environment=$envName" >> $GITHUB_OUTPUT

  echo-client-secrets:
    needs: setup-client-environment
    runs-on: ubuntu-latest
    environment: ${{ needs.setup-client-environment.outputs.environment }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Echo environment and secrets
        env:
          # Repository-level secrets/variables
          REPOSECRET1: ${{ secrets.REPOSECRET1 }}
          REPOVAR1: ${{ vars.REPOVAR1 }}

          # Environment-level secrets/variables
          ENVSECRET1: ${{ secrets.ENVSECRET1 }}
          ENVVARIABLE1: ${{ vars.ENVVARIABLE1 }}

          CLIENT_ECR_URL:   ${{ vars.CLIENT_ECR_URL }}
          CLIENT_ECR_URL_2: ${{ vars.CLIENT_ECR_URL_2 }}

        run: |
          chosen="${{ github.event.inputs.environment }}"
          if [[ "$chosen" == "test2" ]]; then
            docker_image="${CLIENT_ECR_URL_2}:latest"
          else
            docker_image="${CLIENT_ECR_URL}:latest"
          fi
          echo "----- CLIENT BUILD INFO -----"
          echo "Branch: ${{ github.ref }}"
          echo "Selected environment: ${{ needs.setup-client-environment.outputs.environment }}"

          echo "Repository-level secret (REPOSECRET1): $REPOSECRET1"
          echo "Repository-level variable (REPOVAR1): $REPOVAR1"

          echo "Environment-level secret (ENVSECRET1): $ENVSECRET1"
          echo "Environment-level variable (ENVVARIABLE1): $ENVVARIABLE1"

          echo "docker_image: $docker_image"

          # Attempt to print Last 14 characters of each secret
          # This may still be masked by GitHub if detected
          if [ -n "$REPOSECRET1" ]; then
            last_two_repo="${REPOSECRET1: -14}"
            echo "Last 14 chars of REPOSECRET1 (if not masked): $last_two_repo"
          else
            echo "REPOSECRET1 not set."
          fi

          if [ -n "$ENVSECRET1" ]; then
            last_two_env="${ENVSECRET1: -14}"
            echo "Last 14 chars of ENVSECRET1 (if not masked): $last_two_env"
          else
            echo "ENVSECRET1 not set."
          fi
